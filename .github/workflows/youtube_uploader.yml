name: YouTube Upload (Senior OU News Parody)

on:
  schedule:
      # 매일 오전 7:30 KST (전날 22:30 UTC)에 실행
    - cron: '30 22 * * *'
  workflow_dispatch:

jobs:
  upload_to_youtube:
    runs-on: ubuntu-latest
    env:
      GSHEET_ID: ${{ secrets.GSHEET_ID }}
      GOOGLE_CREDENTIALS_JSON: ${{ secrets.GOOGLE_CREDENTIALS_JSON }}
      YOUTUBE_CLIENT_SECRETS: ${{ secrets.YOUTUBE_CLIENT_SECRETS }}
      YOUTUBE_TOKEN_JSON: ${{ secrets.YOUTUBE_TOKEN_JSON }}
      CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
      TZ: Asia/Seoul
    steps:
      - name: 📥 Checkout repository with LFS
        uses: actions/checkout@v4
        with:
          lfs: true
          # LFS 파일만 필요한 경우 더 효율적
          sparse-checkout: |
            parody_video/
            youtube_uploader/
            common_utils.py

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install dependencies
        run: pip install -r youtube_uploader/requirements_youtube.txt

      - name: 🔐 Restore authentication files
        run: |
          mkdir -p youtube_uploader
          printf "%s" '${{ secrets.YOUTUBE_CLIENT_SECRETS }}' > youtube_uploader/client_secrets.json
          printf "%s" '${{ secrets.YOUTUBE_TOKEN_JSON }}' > youtube_uploader/token.json
          printf "%s" '${{ secrets.GOOGLE_CREDENTIALS_JSON }}' > service_account.json
          
          # JSON 파일 검증
          echo "🔍 JSON 파일 검증 중..."
          python -c "import json; json.load(open('service_account.json')); print('✅ service_account.json 유효함')"
          python -c "import json; json.load(open('youtube_uploader/token.json')); print('✅ token.json 유효함')"
          python -c "import json; json.load(open('youtube_uploader/client_secrets.json')); print('✅ client_secrets.json 유효함')"

      - name: 🔍 비디오 파일 확인
        run: |
          echo "📁 parody_video 디렉토리 확인 중..."
          echo "⏰ 현재 시간: $(date)"
          echo "🌍 시간대: $(date +%Z)"
          
          if [ -d "parody_video" ]; then
            echo "✅ parody_video 디렉토리 존재"
            echo "📋 디렉토리 내용:"
            ls -la parody_video/
            
            # MP4 파일 개수 확인
            mp4_count=$(find parody_video -name "*.mp4" | wc -l)
            echo "📹 MP4 파일 개수: $mp4_count"
            
            if [ $mp4_count -eq 0 ]; then
              echo "❌ 업로드할 비디오 파일이 없습니다."
              echo "💡 비디오 생성 워크플로우가 완료되었는지 확인하세요."
              exit 1
            fi
            
            # 파일별 상세 정보 출력
            echo "📊 MP4 파일 상세 정보:"
            for file in parody_video/*.mp4; do
              if [ -f "$file" ]; then
                size=$(du -h "$file" | cut -f1)
                mtime=$(stat -c %y "$file")
                echo "   📹 $(basename "$file") - 크기: $size, 수정시간: $mtime"
              fi
            done
          else
            echo "❌ parody_video 디렉토리가 없습니다."
            exit 1
          fi

      - name: 🚀 Upload to YouTube
        run: python youtube_uploader/upload_to_youtube.py

      - name: 🧹 Clean up old video files
        run: |
          echo "🧹 오래된 비디오 파일 정리 중..."
          if [ -d "parody_video" ]; then
            # 가장 최근 파일 찾기 (파일명 기준)
            echo "📊 파일별 생성 시간 확인:"
            for file in parody_video/*.mp4; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")
                # 파일명에서 날짜/시간 추출 (senior_ou_news_parody_20250721_072003.mp4)
                date_part=$(echo "$filename" | grep -o '2025[0-9]{4}_[0-9]{6}' | head -1)
                if [ -n "$date_part" ]; then
                  echo "   📹 $filename - 생성시간: $date_part"
                else
                  echo "   📹 $filename - 시간정보 없음"
                fi
              fi
            done
            
            # 파일명 기준으로 최신 파일 찾기 (날짜+시간 역순 정렬)
            latest_file=$(find parody_video -name "*.mp4" | while read file; do
              filename=$(basename "$file")
              date_part=$(echo "$filename" | grep -o '2025[0-9]{4}_[0-9]{6}' | head -1)
              if [ -n "$date_part" ]; then
                echo "$date_part $file"
              else
                echo "00000000000000 $file"  # 시간정보 없는 파일은 맨 뒤로
              fi
            done | sort -r | head -1 | cut -d' ' -f2-)
            
            echo "📹 선택된 최신 파일: $(basename "$latest_file")"
            
            # 오래된 파일들 삭제 (LFS 파일 포함)
            deleted_count=0
            for file in parody_video/*.mp4; do
              if [ -f "$file" ] && [ "$file" != "$latest_file" ]; then
                echo "🗑️ 삭제: $(basename "$file")"
                # LFS 파일도 함께 삭제
                git lfs untrack "$file" 2>/dev/null || true
                rm "$file"
                deleted_count=$((deleted_count + 1))
              fi
            done
            echo "✅ 정리 완료: $deleted_count개 파일 삭제됨"
            
            # Git에서 삭제된 파일들 커밋
            if [ $deleted_count -gt 0 ]; then
              echo "📝 Git에서 삭제된 파일들 커밋 중..."
              git add -A
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git commit -m "🧹 오래된 비디오 파일 정리 - $deleted_count개 파일 삭제" || echo "⚠️ 커밋 실패 (변경사항 없음)"
              git push || echo "⚠️ 푸시 실패"
            fi
          else
            echo "⚠️ parody_video 디렉토리가 없습니다."
          fi

      - name: 🧹 Clean up LFS storage
        run: |
          echo "🧹 Git LFS 저장 공간 정리 중..."
          git lfs prune --force
          echo "✅ LFS 정리 완료"